// <auto-generated />
using System;
using CM.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CM.Data.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250127201331_AddedEthcoinBlockModel")]
    partial class AddedEthcoinBlockModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CM.Infrastructure.Data.Models.BitcoinBlockModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("block_hash");

                    b.Property<long>("Height")
                        .HasColumnType("bigint")
                        .HasColumnName("block_height");

                    b.Property<short>("HighFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("high_fee_per_kb");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean")
                        .HasColumnName("is_test");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_fork_hash");

                    b.Property<long>("LastForkHeight")
                        .HasColumnType("bigint")
                        .HasColumnName("last_fork_height");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("latest_block_url");

                    b.Property<short>("LowFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("low_fee_per_kb");

                    b.Property<short>("MediumFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("medium_fee_per_kb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("block_name");

                    b.Property<short>("PeerCount")
                        .HasColumnType("smallint")
                        .HasColumnName("peer_count");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("previous_block_hash");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("previous_block_url");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("block_time");

                    b.Property<short>("UnconfirmedCount")
                        .HasColumnType("smallint")
                        .HasColumnName("unconfirmed_tx_count");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "ix_bitcoin_blocks_created_at");

                    b.ToTable("bitcoin_blocks");
                });

            modelBuilder.Entity("CM.Infrastructure.Data.Models.DashcoinBlockModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("block_hash");

                    b.Property<long>("Height")
                        .HasColumnType("bigint")
                        .HasColumnName("block_height");

                    b.Property<short>("HighFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("high_fee_per_kb");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean")
                        .HasColumnName("is_test");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_fork_hash");

                    b.Property<long>("LastForkHeight")
                        .HasColumnType("bigint")
                        .HasColumnName("last_fork_height");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("latest_block_url");

                    b.Property<short>("LowFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("low_fee_per_kb");

                    b.Property<short>("MediumFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("medium_fee_per_kb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("block_name");

                    b.Property<short>("PeerCount")
                        .HasColumnType("smallint")
                        .HasColumnName("peer_count");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("previous_block_hash");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("previous_block_url");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("block_time");

                    b.Property<short>("UnconfirmedCount")
                        .HasColumnType("smallint")
                        .HasColumnName("unconfirmed_tx_count");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "ix_dashcoin_blocks_created_at");

                    b.ToTable("dashcoin_blocks");
                });

            modelBuilder.Entity("CM.Infrastructure.Data.Models.EthcoinBlockModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("BaseFee")
                        .HasColumnType("bigint")
                        .HasColumnName("base_fee");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("block_hash");

                    b.Property<long>("Height")
                        .HasColumnType("bigint")
                        .HasColumnName("block_height");

                    b.Property<long>("HighGasPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("high_gas_price");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean")
                        .HasColumnName("is_test");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_fork_hash");

                    b.Property<long>("LastForkHeight")
                        .HasColumnType("bigint")
                        .HasColumnName("last_fork_height");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("latest_block_url");

                    b.Property<long>("LowGasPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("low_gas_price");

                    b.Property<long>("LowPriorityFee")
                        .HasColumnType("bigint")
                        .HasColumnName("low_priority_fee");

                    b.Property<long>("MediumGasPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("medium_gas_price");

                    b.Property<long>("MediumPriorityFee")
                        .HasColumnType("bigint")
                        .HasColumnName("medium_priority_fee");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("block_name");

                    b.Property<short>("PeerCount")
                        .HasColumnType("smallint")
                        .HasColumnName("peer_count");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("previous_block_hash");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("previous_block_url");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("block_time");

                    b.Property<short>("UnconfirmedCount")
                        .HasColumnType("smallint")
                        .HasColumnName("unconfirmed_tx_count");

                    b.Property<long>("highPriorityFee")
                        .HasColumnType("bigint")
                        .HasColumnName("high_priority_fee");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "ix_ethcoin_blocks_created_at");

                    b.ToTable("ethcoin_blocks");
                });

            modelBuilder.Entity("CM.Infrastructure.Data.Models.LitecoinBlockModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("block_hash");

                    b.Property<long>("Height")
                        .HasColumnType("bigint")
                        .HasColumnName("block_height");

                    b.Property<short>("HighFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("high_fee_per_kb");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean")
                        .HasColumnName("is_test");

                    b.Property<string>("LastForkHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_fork_hash");

                    b.Property<long>("LastForkHeight")
                        .HasColumnType("bigint")
                        .HasColumnName("last_fork_height");

                    b.Property<string>("LatestUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("latest_block_url");

                    b.Property<short>("LowFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("low_fee_per_kb");

                    b.Property<short>("MediumFeePerKb")
                        .HasColumnType("smallint")
                        .HasColumnName("medium_fee_per_kb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("block_name");

                    b.Property<short>("PeerCount")
                        .HasColumnType("smallint")
                        .HasColumnName("peer_count");

                    b.Property<string>("PreviousHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("previous_block_hash");

                    b.Property<string>("PreviousUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("character varying(2083)")
                        .HasColumnName("previous_block_url");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("block_time");

                    b.Property<short>("UnconfirmedCount")
                        .HasColumnType("smallint")
                        .HasColumnName("unconfirmed_tx_count");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedAt" }, "ix_litecoin_blocks_created_at");

                    b.ToTable("litecoin_blocks");
                });
#pragma warning restore 612, 618
        }
    }
}
